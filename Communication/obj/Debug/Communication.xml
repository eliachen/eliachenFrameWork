<?xml version="1.0"?>
<doc>
<assembly>
<name>
Communication
</name>
</assembly>
<members>
<member name="T:Communication.CommPort.ComPortWay.Model_Strgt_Valid_Dly_Valid">
	<summary>
 -&gt; Basic
 直接模式+校验模式+延迟模式+校验模式
 使用：组合模式：对象,先进行S_V，然后进行D_V
 </summary>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.CommSeverConfig">
	<summary>
 通信服务器配置
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.CommSeverType">
	<summary>
 通信服务类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.CommSeverState">
	<summary>
 通信服务状态
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.MsgType">
	<summary>
 消息的类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.Msg">
	<summary>
 自定义的消息详情:自定义消息的模式
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommSeverLogElement`2.MsgTime">
	<summary>
 消息时间
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortWay.Model_Dly_Valid">
	<summary>
 -&gt; Dly
 延迟模式+校验模式
 延迟读取后进行校验
 使用：设置验证函数+设置延迟参数
 </summary>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortStatitics.CountRecv">
	<summary>
 通信接口:数据接收次数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortStatitics.CountSend">
	<summary>
 通信接口：数据发送次数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortStatitics.SumSend">
	<summary>
 统计总发送字节数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortStatitics.SumRecv">
	<summary>
 统计总接收字节数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ICommPortStatitics">
	<summary>
 通讯的统计
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ComPortWay.Model_Delay.GetDelayData(Communication.CommPort.ICommPort@,System.Int32)">
	<summary>
 延迟获取数据模式
 </summary>
	<param name="CommPort">通讯端口</param>
	<param name="DelayTime">延迟时间</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortWay.Model_Delay">
	<summary>
 -&gt; Basic
 延迟模式
 延迟回检测直到读出所有缓存中的数据
 使用：设置延迟参数
 </summary>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommSever`1.CommClientList">
	<summary>
 客户端列表
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommSever`1.CommConfigStr">
	<summary>
 字符串配置
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommSever`1.CommSeverState">
	<summary>
 服当前状态
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommSever`1.CommSeverType">
	<summary>
 服务的类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommSever`1.Start">
	<summary>
 开始服务:开始监听与接收传入连接
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommSever`1.Pause">
	<summary>
 服务暂停：保持监听状态，断开传入连接
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommSever`1.Stop">
	<summary>
 服务停止：断开所有传入连接，服务停止
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommSever`1.FreshClientList">
	<summary>
 刷新列表
 </summary>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.CommPortConfig">
	<summary>
 通信接口配置
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.CommPortType">
	<summary>
 通信接口类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.CommPortIsConnected">
	<summary>
 通信的连接状态
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.MsgType">
	<summary>
 消息的类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.MsgProcessDescription">
	<summary>
 通信的阶段过程
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.Msg">
	<summary>
 自定义的消息详情:自定义消息的模式
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.Log.CommPortLogElement`1.MsgTime">
	<summary>
 消息时间
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Communication.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Communication.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Communication.CommPort.ICommPortWay.TimeDelaySend">
	<summary>
 时间:发送前的延迟
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortWay.TimeOutRecv">
	<summary>
 时间:接收数据触发后延迟检测缓冲区
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPortWay.CommDone">
	<summary>
 1
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ICommPortWay">
	<summary>
 通讯收到数据后基本处理方式,核心是为了判定一次通讯的结束
 两种模型：1、延迟停等 2、字节流判断
 </summary>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortWay.Model_Strgt_Valid">
	<summary>
 -&gt;Basic
 直接模式+校验模式
 直接模式基础上,进行数据校验
 使用：设置验证函数+设置延迟参数
 </summary>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPort.CommPortWay">
	<summary>
 通讯收发的处理参数及其模式
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPort.CommStatics">
	<summary>
 通讯过程中的数据统计
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPort.CommCofigStr">
	<summary>
 通讯定义,利用字符串
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPort.CommPortType">
	<summary>
 通信类型定义
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Communication.CommPort.ICommPort.IsConnected">
	<summary>
 表明连接的状态
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.Connect">
	<summary>
 连接建立
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.DisConnect">
	<summary>
 断开连接
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.ReConnect">
	<summary>
 重新连接
 </summary>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ICommPort.RecvDataHandle`1">
	<summary>
 委托：数据收到的字节数组
 </summary>
	<param name="sender">传出的自定义类型</param>
	<param name="RecvArrByte">接收到的字节数组</param>
	<remarks></remarks>
</member><member name="E:Communication.CommPort.ICommPort.RecvDataEvent">
	<summary>
 事件：数据来到后的字节数组
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.Send(System.Byte[])">
	<summary>
 发送数据的接口
 </summary>
	<param name="SendArrByte"></param>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.Receive">
	<summary>
 接收数据接口（及时的,一次把缓冲区的数据取出来）
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.ICommPort.ReceiveAsWay(Communication.CommPort.ICommPortWay)">
	<summary>
 接收数据接口(约定格式)
 </summary>
	<param name="Way">接收模式</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ICommPort">
	<summary>
 通讯管理必须的通讯管理接口
 定义: 数据局接收的接口
 定义：数据发出的接口
 </summary>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.Log.CommPortLogManager`1">
	<summary>
 日志管理
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.eDNS.GetAddr(System.String)">
	<summary>
 通过DNS解析对应的IP地址
 </summary>
	<param name="Str"></param>
	<returns>远程地址</returns>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.eDNS.GetLocalAddr">
	<summary>
 通过DNS获取本机的ip地址
 </summary>
	<returns>本机地址的数组</returns>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortWay.Model_Basic">
	<summary>
 基类实现通讯的基本模式
 </summary>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortStatics.Model_BasicStatics">
	<summary>
 基类实现通讯统计的基本模式
 </summary>
	<remarks></remarks>
</member><member name="T:Communication.CommPort.ComPortWay.Model_Straight">
	<summary>
 -&gt; Basic
 直接模式
 直接返回通讯口当前能读到的所有数据
 使用：无设置
 </summary>
	<remarks></remarks>
</member><member name="M:Communication.CommPort.eSerialPort.Receive_Stra">
	<summary>
 接收:直接由当前缓存中取数据(没有数据会回一个Length=0的空字节数组)
 </summary>
	<returns></returns>
</member><member name="M:Communication.CommPort.eSerialPort.ReceiveAsWay(Communication.CommPort.ICommPortWay)">
	<summary>
 接收:按照接口策略处理
 </summary>
	<param name="Way"></param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>